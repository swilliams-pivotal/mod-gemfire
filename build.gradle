/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: 'gradle/setup.gradle'

subprojects {
  apply plugin: 'java'
  apply plugin: 'groovy'

  defaultTasks = ['assemble']

  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'

  configurations {
    provided
  }

  sourceSets {
    main {
      compileClasspath = compileClasspath + configurations.provided
    }
  }

  repositories {
    maven { url 'http://repo.springsource.org/release' }
    maven { url 'http://dist.gemstone.com/maven/release' }
    maven { url 'http://download.java.net/maven/2' }
    mavenCentral()
    mavenLocal()
  }
  
  dependencies {
    provided "org.vert-x:vertx-core:$vertxVersion"
    provided "org.vert-x:vertx-platform:$vertxVersion"
    provided "org.vert-x:vertx-lang-groovy:$vertxVersion"
    provided "org.codehaus.groovy:groovy-all:$groovyVersion"

    compile "com.gemstone.gemfire:gemfire:$gemfireVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.mozilla:rhino:$rhinoVersion"

    testCompile "org.vert-x:vertx-junit-annotations:1.0"
    testCompile "org.vert-x:vertx-lang-java:$vertxVersion"
    testCompile "org.vert-x:vertx-lang-rhino:$vertxVersion"
    testCompile("org.vert-x:vertx-testframework:$vertxVersion") {
      transitive = false // don't need all of the other language deps
    }
  }

  javadoc.classpath += configurations.provided
  jar.enabled = false

  task copyMod(type:Copy, dependsOn: 'classes') {
    into "build/mod/$modulename-v$version"
    from 'build/classes/main'
    from 'build/resources/main'
    from 'src/main/conf'
    into( 'lib' ) {
      from configurations.compile
    }
  }

  // Package into build/libs/mod.zip
  task dist(type: Zip, dependsOn: 'copyMod') {
    group = 'vert.x'
    description = "Assembles a vert.x module in 'mod.zip' format"
    destinationDir = project.file('build/libs')
    archiveName = 'mod.zip'
    from("build/mod") {
      exclude '*example*'
    }
  }

  task prepareVertxTest(type: Sync, dependsOn: ['copyMod'] ) {
    from 'build/mod'
    into 'build/tmp/mod-test'
  }

  test {
    classpath = files(classpath.findAll {
      !( it.toString() ==~ /.+build\/(classes|resources)\/(main)$/ )
    })

    // Some vert.x properties
    systemProperty 'vertx.test.timeout', 15
    systemProperty 'vertx.mods', "$projectDir/build/tmp/mod-test"
    systemProperty 'vertx.version', "$project.version"

    // Show output
    testLogging.showStandardStreams = true
  }

  test.dependsOn testClasses, prepareVertxTest
}


// --------------------------------------------------------------------
// global task definitions


// --------------------------------------------------------------------
// Sub projects


project(":mod-gemfire-acn") {
    dependencies {
        // project dependencies
    }
}

project(":mod-gemfire-dmn") {
    dependencies {
        // project dependencies
    }
}

project(":mod-gemfire-gateway") {
    dependencies {
        // project dependencies
    }
}
